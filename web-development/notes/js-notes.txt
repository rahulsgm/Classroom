JS (JavaScript)

Operators:
What is an operator?
In Javascript, an operator is a special symbol used to perform operations on operands(values and variables).
For example,
2+3; //5 (this is a comment)
In this scenario the + is a symbol/operator that perfoms addition(the operation)

Types of operators:
Assignment operators
Arithmethic operators
Comparison operators
Logical operators
Bitwise operators
String operators

Assignment operators are used to assingn values to variables. For example,
const x = 5;
Here, the equal sign is using the symbol to assign x a value of 5.

Here's a list of commonly used operators:

Operator:	Name:	Example:
=	Assignment operator	a = 7; // 7
+=	Addition assignment	a += 5; // a = a + 5
-=	Subtraction Assignment	a -= 2; // a = a - 2
*=	Multiplication Assignment	a *= 3; // a = a * 3
/=	Division Assignment	a /= 2; // a = a / 2
%=	Remainder Assignment	a %= 2; // a = a % 2
**=	Exponentiation Assignment	a **= 2; // a = a**2

Note: The commonly used assignment operator is =. You will understand other assignment operators such as +=, -=, *= etc. once we learn arithmetic operators.

JavaScript Arithmetic Operators:
These operators are used to perform mathematical calculations. For expample the + operator is used to add 2 or more operands.

here are a list:

Operator   Name	                          Example
+	   Addition	                   x + y
-	   Subtraction	                   x - y
*	   Multiplication                  x * y
/	   Division	                   x / y
%	   Remainder	                   x % y
++	   Increment (increments by 1)     ++x or x++
--	   Decrement (decrements by 1)     --x or x--
**	   Exponentiation (Power)	   x ** y

Example:

let x = 5;
let y = 3;

// addition
console.log('x + y = ', x + y);  // 8

// subtraction
console.log('x - y = ', x - y);  // 2

// multiplication
console.log('x * y = ', x * y);  // 15

// division
console.log('x / y = ', x / y);  // 1.6666666666666667

// remainder
console.log('x % y = ', x % y);   // 2

// increment
console.log('++x = ', ++x); // x is now 6
console.log('x++ = ', x++); // prints 6 and then increased to 7
console.log('x = ', x);     // 7

// decrement
console.log('--x = ', --x); // x is now 6
console.log('x-- = ', x--); // prints 6 and then decreased to 5
console.log('x = ', x);     // 5

//exponentiation
console.log('x ** y =', x ** y);

Comparison Operators:
Compare two values and give back a boolean value: either true or false. 
Comparison operators are used in decision making and loops.
Boolean Value:
A type of value which is given after a comarison of two values.
It can either be true or false.


Comparison Operators List/Explaination:
(>) Greater than:  If the left operand is greater than the right operand.
(<) Less than:     If the left operand is less than the right operand.
(==) Equal to:     If the operands are equal.
(!=) Not Equal to: If the operands are not equal.
(>=) Greater than or Equal to:  If the left operand is greater or equal to the right operand.
(<=) Less than or Equal to:     If the left operand is less than or equal to the right operand.
(===) Strict Equal to:          If the operands are equal and of the SAME TYPE.
(!==) Strict Not Equal to:      If the operands are equal but of different type or not equal at all. 

Note: In JavaScript, == is a comparison operator, whereas = is an assignment operator. If you mistakenly use = instead of ==, you might get unwanted result.
Note: The difference between == and === is that:== evaluates to true if the operands are equal, however, === evaluates to true only if the operands are equal and of the same type


Logical Operators And, Or, Not:
(&&) Logical AND:  True if both the operands/boolean values are true, else evaluates to false.
(||) Logical OR:   True if either of the operands/boolean values is true. Evaluates to false if both are false.
(!)  Logical Not:  True if the operand is false and vice-versa.

Note: You can also use logical operators with numbers. In JavaScript, 0 is false and all non-zero values are true.




If else Statement:

The if Else Statement is used to run a block of code among more than 1 alternatives. 
There are three forms of the if...else statement.:
1. IF statement 
2. IF...ELSE statement
3. IF...ELSE IF...Else statement

The syntax of the If statement:
if (condition){
    // the body of the if (this is a comment, this is not part of the syntax)
}

1. The if statement evaluates the condition inside the parenthesis ().
2. If the condition is evaluated to true, the code inside the body of if is executed.
3. If the condition is evaluated to false, the code inside the body of if is skipped.
Note: The code inside { } is the body of the if statement.

The if...else statement can have an optional else clause. The syntax of the if...else statement is:
if (condition) {
	// block of code if condition is true(this is a comment)
} else {
	// block of code if condition is false(this is a comment)
}
If the condition is evaluated true, the code inside of the body of if is executed and the code inside of the body of else is skipped from the execution.
If the condition is evaluated false, the code inside of the body of if is skipped from execution and the code inside of the body of else is executed.

If...else If...else statement:
The if...else statement is used to execute a block of code among two alternatives. However, if you need to make a choice between more than two alternatives, if...else if...else can be used.
The syntax of the if...else if...else statement:
if (condition) {
	// code block 1
} else if {
	// code block 2
} else {
	// code block 3
}

If condition 1 evaluates to true code block 1 is executed.
If condition 1 evaluates to false code block 2 is executed.
If condition 2 is true, the code block 2 is executed.
If condition 2 is false, the code block 3 is executed.

Nested if...else if...else statement:
You can also use an if...else statement inside of an if...else statement. This is known as nested if...else statement.

Syntax of the Nested If...else statement:
if (condition) {
	if (condition) {
	// block of code if condition is true(this is a comment)
} else {
	// block of code if condition is false(this is a comment)
}// block of code if condition is true(this is a comment)
} else {
	// block of code if condition is false(this is a comment)
}

Note: As you can see, nested if...else makes our logic complicated and we should try to avoid using nested if...else whenever possible.

Body of the if...else statement with only one statement:
If the body of if...else has only one statement, we can omit { } in our programs. For example, you can replace:

const number = 2;
if (number > 0) {
    console.log("The number is positive.");
} else {
   console.log("The number is negative or zero.");
}

with this:

const number = 2;
if (number > 0)
    console.log("The number is positive.");
 else 
   console.log("The number is negative or zero.");

and get the same output.


String Operators:

The string operator is used to join/combine 2 strings. with a + symbol. 

Note: When + is used with strings, it performs concatenation. However, when + is used with numbers, it performs addition.


